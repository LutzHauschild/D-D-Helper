name: C++ CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    name: ${{ matrix.os }}-build-and-test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            qt-version: '6.5.0'
          - os: macos-latest
            qt-version: '6.5.0'
          - os: windows-latest
            qt-version: '6.5.0'

    steps:
    - uses: actions/checkout@v3
      with:
        clean: true

    - name: Install Dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-dev libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0 libxcb-xkb1 xvfb
        sudo apt-get install -y libicu-dev libicu70 libicu-dev

    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ matrix.qt-version }}
        archives: 'qtbase qttools'

    - name: Debug Qt Installation (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        echo "Qt installation directory:"
        ls -la "$Qt6_DIR"
        echo "Qt lib directory:"
        ls -la "$Qt6_DIR/lib"
        echo "LD_LIBRARY_PATH: $LD_LIBRARY_PATH"
        echo "Setting LD_LIBRARY_PATH to include Qt libraries"
        export LD_LIBRARY_PATH="$Qt6_DIR/lib:$LD_LIBRARY_PATH"
        echo "New LD_LIBRARY_PATH: $LD_LIBRARY_PATH"

    - name: Create and Clean Build Directory
      shell: bash
      run: |
        mkdir -p "${{github.workspace}}/build"
        rm -rf "${{github.workspace}}/build/"*

    - name: Configure CMake (Unix)
      if: runner.os != 'Windows'
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: |
        echo "Current directory: $(pwd)"
        echo "Workspace directory: $GITHUB_WORKSPACE"
        ls -la "$GITHUB_WORKSPACE"
        export LD_LIBRARY_PATH="$Qt6_DIR/lib:$LD_LIBRARY_PATH"
        cmake "$GITHUB_WORKSPACE" -DCMAKE_BUILD_TYPE=Release

    - name: Configure CMake (Windows)
      if: runner.os == 'Windows'
      shell: cmd
      working-directory: ${{github.workspace}}\build
      run: |
        echo "Current directory: %CD%"
        echo "Workspace directory: %GITHUB_WORKSPACE%"
        dir "%GITHUB_WORKSPACE%"
        cmake "%GITHUB_WORKSPACE%" -DCMAKE_BUILD_TYPE=Release

    - name: Build (Unix)
      if: runner.os != 'Windows'
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: |
        export LD_LIBRARY_PATH="$Qt6_DIR/lib:$LD_LIBRARY_PATH"
        cmake --build . --config Release

    - name: Build (Windows)
      if: runner.os == 'Windows'
      working-directory: ${{github.workspace}}\build
      shell: cmd
      run: cmake --build . --config Release

    - name: Test (Linux)
      if: runner.os == 'Linux'
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: |
        export LD_LIBRARY_PATH="$Qt6_DIR/lib:$LD_LIBRARY_PATH"
        xvfb-run -a ctest -C Release --output-on-failure

    - name: Test (macOS)
      if: runner.os == 'macOS'
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: ctest -C Release --output-on-failure

    - name: Test (Windows)
      if: runner.os == 'Windows'
      working-directory: ${{github.workspace}}\build
      shell: cmd
      run: ctest -C Release --output-on-failure 
